"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @fileoverview Type-checks all d.ts files found in the test tree.
 * This verifies that the d.ts we generate as a product of compilation
 * are valid.
 *
 * In general, .d.ts are generated by the TypeScript compiler, not tsickle, but
 * we do some transforms of those .d.ts files for Clutz interop (see
 * src/clutz.ts) and this test helps verify those transforms generate valid
 * compileable output.
 */
const fs = __importStar(require("fs"));
const ts = __importStar(require("typescript"));
const testSupport = __importStar(require("./test_support"));
describe('clutz dts', () => {
    beforeEach(() => {
        testSupport.addDiffMatchers();
    });
    it('produces a valid .d.ts', () => {
        const dtsSources = new Map();
        for (const tsPath of testSupport.allDtsPaths()) {
            const tsSource = fs.readFileSync(tsPath, 'utf-8');
            dtsSources.set(tsPath, tsSource);
        }
        const program = testSupport.createProgram(dtsSources);
        const diagnostics = ts.getPreEmitDiagnostics(program);
        testSupport.expectDiagnosticsEmpty(diagnostics);
    });
});
//# sourceMappingURL=e2e_clutz_dts_test.js.map