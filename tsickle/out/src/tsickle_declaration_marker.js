"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTsickleDeclarationMarkerTransformerFactory = void 0;
const ts = __importStar(require("typescript"));
const path = __importStar(require("./path"));
const transformer_util_1 = require("./transformer_util");
/** Marks tsickle generated .d.ts's with a comment we can find later. */
function makeTsickleDeclarationMarkerTransformerFactory(options) {
    return (context) => {
        return {
            transformBundle() {
                // The TS API wants declaration transfomers to be able to handle Bundle,
                // but we don't support them within tsickle.
                throw new Error('did not expect to transform a bundle');
            },
            transformSourceFile(sf) {
                if (!options.rootDir)
                    return sf;
                let syntheticFirstStatement = (0, transformer_util_1.createNotEmittedStatement)(sf);
                syntheticFirstStatement = ts.addSyntheticTrailingComment(syntheticFirstStatement, ts.SyntaxKind.SingleLineCommentTrivia, `!! generated by tsickle from ${path.relative(options.rootDir, sf.fileName)}`, 
                /*hasTrailingNewLine=*/ true);
                return (0, transformer_util_1.updateSourceFileNode)(sf, ts.factory.createNodeArray([
                    syntheticFirstStatement, ...sf.statements
                ]));
            }
        };
    };
}
exports.makeTsickleDeclarationMarkerTransformerFactory = makeTsickleDeclarationMarkerTransformerFactory;
//# sourceMappingURL=tsickle_declaration_marker.js.map